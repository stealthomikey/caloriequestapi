# test generated by ai

import pytest
from fastapi.testclient import TestClient
from unittest.mock import AsyncMock  
from app.main import app


client = TestClient(app)

def test_read_root():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == ['Hello world']


def test_search_meals_success(mocker):
    mock_data_from_service = [{"idMeal": "52771", "strMeal": "Spaghetti Carbonara"}]
    mocker.patch(
        "app.routers.meals.search_meals_by_name",
        new_callable=AsyncMock,
        return_value=mock_data_from_service
    )
    response = client.get("/meals/search?query=Carbonara")
    assert response.status_code == 200
    response_data = response.json()
    assert len(response_data) > 0
    assert response_data[0]["strMeal"] == "Spaghetti Carbonara"


def test_search_meals_not_found(mocker):
    mocker.patch(
        "app.routers.meals.search_meals_by_name",
        new_callable=AsyncMock,
        return_value=[]
    )
    response = client.get("/meals/search?query=NonExistentMeal")
    assert response.status_code == 404
    assert "No meals found matching" in response.json()["detail"]


def test_search_meals_query_too_short():
    response = client.get("/meals/search?query=a")
    assert response.status_code == 422
    response_data = response.json()
    assert "String should have at least 2 characters" in str(response_data)